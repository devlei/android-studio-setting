<application>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1704697449510" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="260" />
    <option name="newTranslationDialogWidth" value="568" />
    <option name="newTranslationDialogX" value="742" />
    <option name="newTranslationDialogY" value="441" />
    <histories>
      <item value="enqueue" />
      <item value="concurrent" />
      <item value="Asynchronously send the request and notify callback of its response or if an error occurred talking to the server, creating the request, or processing the response." />
      <item value="Similarity" />
      <item value="p" />
      <item value="similarity" />
      <item value="release Face Resource" />
      <item value="native Init Face Model" />
      <item value="初始化模型&#10;" />
      <item value="初始化模型" />
      <item value="leshi Person Face Init" />
      <item value="Block the producer from generating new images. Once the producer has produced the number of images equal to the image queue depth, and none have been closed, the producer will stop producing images. Note that images may be queued internally and not be delivered to the analyzer until the last delivered image has been closed with ImageProxy.close(). These internally queued images will count towards the total number of images that the producer can provide at any one time. When the producer stops producing images, it may also stop producing images for other use cases, such as Preview, so it is important for the analyzer to keep up with frame rate, on average. Failure to keep up with frame rate may lead to jank in the frame stream and a diminished user experience. If more time is needed for analysis on some frames, consider increasing the image queue depth with ImageAnalysis.Builder.setImageQueueDepth(int). See Also: ImageAnalysis.Builder.setImageQueueDepth(int)" />
      <item value="Rewind the buffer to zero" />
      <item value="finalize" />
      <item value="init Depth" />
      <item value="features" />
      <item value="gallery" />
      <item value="特征库" />
      <item value="特征ku" />
      <item value="特征" />
      <item value="te" />
      <item value="featur" />
      <item value="feature" />
      <item value="fe" />
      <item value="leshi facereg similarity" />
      <item value="facereg" />
      <item value="face Box" />
      <item value="human" />
      <item value="hu" />
      <item value="人体" />
      <item value="r" />
      <item value="Analysis" />
      <item value="analyze" />
      <item value="person Pointer" />
      <item value="person face pointer" />
      <item value="Declares and names the project." />
      <item value="转换器" />
      <item value="转换器&#10;" />
      <item value="Property with 'Array' type in a 'data' class: it is recommended to override 'equals()' and 'hashCode()'" />
      <item value="table face" />
      <item value="You can set the annotation processor argument (room.schemaLocation) to tell Room to export the database schema into a folder. Even though it is not mandatory, it is a good practice to have version history of your schema in your codebase and you should commit the schema files into your version control system (but don't ship them with your app!). When room.schemaLocation is set, Room will check this variable and if it is set to true, the database schema will be exported into the given folder. Value of exportSchema is true by default but you can disable it for databases when you don't want to keep history of versions (like an in-memory only database). Returns: Whether the schema should be exported to the given folder when the room.schemaLocation argument is set. Defaults to true" />
      <item value="You can set the annotation processor argument (room.schemaLocation) to tell Room to export the database schema into a folder. Even though it is not mandatory, it is a good practice to have version history of your schema in your codebase and you should commit the schema files into your version control system (but don't ship them with your app!). When room.schemaLocation is set, Room will check this variable and if it is set to true, the database schema will be exported into the given folder. Value of exportSchema is true by default but you can disable it for databases when you don't want to keep history of versions (like an in-memory only database). Returns: Whether the schema should be exported to the given folder when the room.schemaLocation argument is set. Defaults to true." />
      <item value="Video Player Activity" />
      <item value="Copy the bitmap's pixels into the specified buffer (allocated by the caller). An exception is thrown if the buffer is not large enough to hold all of the pixels (taking into account the number of bytes per pixel) or if the Buffer subclass is not one of the support types (ByteBuffer, ShortBuffer, IntBuffer)." />
      <item value="face gallery size" />
      <item value="feature Compare" />
      <item value="Only deliver the latest image to the analyzer, dropping images as they arrive." />
      <item value="Sets the backpressure strategy to apply to the image producer to deal with scenarios where images may be produced faster than they can be analyzed. The available values are STRATEGY_BLOCK_PRODUCER and STRATEGY_KEEP_ONLY_LATEST. If not set, the backpressure strategy will default to STRATEGY_KEEP_ONLY_LATEST. Params: strategy – The strategy to use. Returns: The current Builder." />
      <item value="When the specified bound size is unavailable, CameraX falls back to select the closest higher resolution size. If CameraX still cannot find any available resolution, it will fallback to select other lower resolutions." />
      <item value="Removes unsuitable sizes and sorts the resolution list in the preferred order. OEMs might make the width or height of the supported output sizes be mod 16 aligned for performance reasons. This means that the device might support 1920x1088 instead of 1920x1080, even though a 16:9 aspect ratio size is 1920x1080. Therefore, the input supported sizes list also contains these aspect ratio sizes when applications specify an AspectRatioStrategy with AspectRatio.RATIO_16_9 and then also specify a ResolutionFilter to apply their own selection logic. Params: supportedSizes – the supported output sizes which have been filtered and sorted according to the other resolution selector settings. rotationDegrees – the rotation degrees to rotate the image to the desired orientation, matching the UseCase’s target rotation setting View size at the front of the returned list. The value is one of the following: 0, 90, 180, or 270. For example, the target rotation set via Preview.Builder.setTargetRotation(int) or Preview.setTargetRotation(int). After rotating the sizes by the rotation degrees, applications can obtain the source image size in the specified target orientation. Then, applications can put the size that best fits to the Preview's Android View size at the front of the returned list. Returns: the desired ordered sizes list for resolution selection. The returned list should only include sizes in the provided input supported sizes list." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CEBUANO" value="1" />
        <entry key="CHINESE" value="402" />
        <entry key="ENGLISH" value="403" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="LATIN" value="1" />
      </map>
    </option>
  </component>
</application>